version: '3.8'

services:
    database-mongodb:
        image: mongo:4.4.1
        hostname: mongodb
        deploy:
            mode: replicated
            replicas: 1
            placement:
                constraints: [node.labels.nodename == database-mongodb]
        volumes:
            # - ./mongodb/cfg/init-mongo.sh:/docker-entrypoint-initdb.d/init-mongo.sh
            - ./mongodb/mongodb_config:/data/configdb
            - ./mongodb/data/db/:/data/db/
        env_file:
            - .env.[PROD]
        environment:
            MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
            MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
            MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
            MONGO_INITDB_USERNAME: ${MONGO_INITDB_USERNAME}
            MONGO_INITDB_PASSWORD: ${MONGO_INITDB_PASSWORD}
            MONGO_REPLICA_SET_NAME: ${MONGO_REPLICA_SET_NAME}
        ports:
            - "27017:27017"
        networks:
            - bknet
            - esnet
        command: mongod --replSet rs0 --oplogSize 10

    backend-node:
        image: "node:12.19.0"
        working_dir: /home/node/app
        deploy:
            mode: replicated
            replicas: 1
            placement:
                constraints: [node.labels.nodename == backend-node]
        env_file:
            - .env.[PROD]
        # environment:
        # - NODE_ENV=production
        volumes:
            - ./dist/:/home/node/app/dist
            - ./node_modules/:/home/node/app/node_modules
            - ./server/:/home/node/app/server
            - ./package.json:/home/node/app/package.json
            - ./wordpress/html/wp-content/uploads:/home/node/app/server/upload_media
        ports:
            - "3000:3000"
        links:
            - elasticsearch
        networks:
            - bknet
            - esnet
            - webnet
        command: "yarn run start-container"

    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.5.2
        deploy:
            mode: replicated
            replicas: 1
            placement:
                constraints: [node.labels.nodename == elasticsearch]
        env_file:
            - .env.[PROD]
        depends_on:
            - database-mongodb
        environment:
            - bootstrap.memory_lock=true
            - "ES_JAVA_OPTS=-Xms1024m -Xmx1024m"
        ulimits:
            memlock:
                soft: -1
                hard: -1
        volumes:
            - ./elastic:/usr/share/elasticsearch/data
            - ./elastic/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
        command: elasticsearch -Enetwork.host=_local_,_site_ -Enetwork.publish_host=_local_
        ports:
            - 9200:9200
        expose:
            - "9200"
        networks:
            - esnet
            - webnet
    
    monstache:
        image: rwynn/monstache:rel6
        deploy:
            mode: replicated
            replicas: 1
            placement:
                constraints: [node.labels.nodename == elasticsearch]
        expose:
            - "8080"
        ports:
            - "8080:8080"
        container_name: monstache
        env_file:
            - .env.[PROD]
        environment:
            - MONSTACHE_MONGO_URL=mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@database-mongodb:27017/?connect=direct&replicaSet=${MONGO_REPLICA_SET_NAME}
            - MONSTACHE_ES_URLS=http://elasticsearch:9200
            - MONSTACHE_DIRECT_READ_NS=detector.Post,detector.Page
        links:
            - elasticsearch
            - database-mongodb
        depends_on:
            - database-mongodb
            - elasticsearch
        networks:
            - esnet
            
    database-wp:
        image: mysql:8.0.21
        deploy:
            mode: replicated
            replicas: 1
            placement:
                constraints: [node.labels.nodename == database-wp]
        env_file: 
            - .env.[PROD]
        ports:
            - "3306:3306"
        environment:
            - MYSQL_DATABASE=wordpress
        command: ['--default-authentication-plugin=mysql_native_password','--lower_case_table_names=1']
        volumes:
            # - ./wordpress/mysql-db/cfg/migrate.sql:/docker-entrypoint-initdb.d/migrate.sql # Edit host URL Site
            - ./wordpress/mysql-db/db:/var/lib/mysql
        networks:
            - wpnet
    
    wordpress-cms:
        depends_on:
            - database-wp
        image: wordpress:5.5.1-fpm-alpine
        deploy:
            mode: replicated
            replicas: 1
            placement:
                constraints: [node.labels.nodename == wordpress-cms]
        env_file: 
            - .env.[PROD]
        ports:
            - "9000:9000"
        environment:
            - WORDPRESS_DB_HOST=database-wp:3306
            - WORDPRESS_DB_USER=$MYSQL_USER
            - WORDPRESS_DB_PASSWORD=$MYSQL_PASSWORD
            - WORDPRESS_DB_NAME=wordpress
            # - WORDPRESS_CONFIG_EXTRA=DEFINE('DB_COLLATE','');DEFINE('FS_METHOD', 'direct');DEFINE('WP_HOME','https://www.cms.detector.news');DEFINE('WP_SITEURL','https://www.cms.detector.news');
        volumes:
            - ./wordpress/html:/var/www/html/cms-admin-detector
            - ./wordpress/rest-api:/var/www/html/cms-admin-detector/rest-api
            - ./letsencrypt:/etc/letsencrypt
        networks:
            - wpnet
            - webnet

    webserver-detector:
        image: nginx:1.15.12-alpine
        deploy:
            mode: replicated
            replicas: 1
            placement:
                constraints: [node.labels.nodename == webserver-detector]
        env_file:
            - .env.[PROD]
        ports:
            - "80:80"
            - "443:443"
            - "4000:4000"
        command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
        volumes:
            - ./dist:/var/www/html/mevn-app
            - ./wordpress/html:/var/www/html/cms-admin-detector
            - ./nginx/nginx-conf:/etc/nginx/conf.d
            - ./letsencrypt:/etc/letsencrypt
        networks:
            - webnet

    certbot:
        depends_on:
            - webserver-detector
        image: certbot/certbot
        deploy:
            mode: replicated
            replicas: 1
            placement:
                constraints: [node.labels.nodename == certbot]
        env_file:
            - .env.[docker]
        volumes:
            - ./letsencrypt:/etc/letsencrypt
            - ./dist:/var/www/html/mevn-app
            - ./wordpress/html:/var/www/html/cms-admin-detector
            - ./log/letsencrypt:/var/log/letsencrypt
        command: certonly --email mihail.parfenyuk@gmail.com --agree-tos --no-eff-email --webroot -w /var/www/html/mevn-app -d detector.news -d www.detector.news -w /var/www/html/cms-admin-detector -d cms.detector.news -d www.cms.detector.news
        entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
        networks:
            - net-services
        # --staging

networks:
    bknet:
        driver: overlay
    wpnet:
        driver: overlay
    webnet:
        driver: overlay
    esnet:
        driver: overlay
    # net-services:
    #     driver: overlay